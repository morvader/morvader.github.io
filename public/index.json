[{"categories":[],"content":"Artículo, basado en experiencias reales, hablo de las claves para presentar QA como una inversión estratégica que mejora el delivery y reduce costes operativos","date":"2025-02-17","objectID":"/ofertasqa/","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Claves para el éxito en la venta de proyectos de QA en consultoría Siempre me he considerado una persona técnica, pero durante los últimos años, por mi seniority dentro de la compañía, he tenido que involucrarme muy a menudo en la parte de venta de servicios de QA. Lejos de uír de este rol, lo he asumido como parte esencial de nuestra profesión. Considero que entender las necesidades de nuestros clientes y transformarlas en soluciones de que impacten en su negocio es lo que da realmente sentido a nuestro trabajo. Particularmente, la venta de servicios de Quality Assurance en el mundo de la consultoría es todo un reto, especialmente porque muchas organizaciones aún ven la calidad como un coste adicional e innecesario en lugar de una inversión estratégica. Durante este tiempo he aprendido que el éxito en la venta de estos servicios radica en cambiar esta percepción y demostrar el valor real que aporta la calidad al negocio. A continuación, compartiré algunas ideas claves para facilitar que me han ayudado. ","date":"2025-02-17","objectID":"/ofertasqa/:0:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Cambio de paradigma: Más allá del testing La primera lección que aprendí, y quizás la más importante, es que no estamos vendiendo pruebas, debemos enfocarlo como una mejora en el proceso de entrega de software. No vendemos pruebas, mejoramos el delivery Esta distinción es crucial. Recuerdo una reunión con un cliente potencial donde el director de tecnología era escéptico sobre contratar servicios de QA. “Ya tenemos testers”, dijo. Sin embargo, cuando reenfocamos la conversación hacia cómo podíamos reducir su tiempo de entrega, mejorar la satisfacción de sus usuarios finales, su perspectiva cambió completamente. En este sentido, alinear la calidad con objetivos de negocio es clave. Debemos buscar indicadores que demuestren que el esfuerzo invertido en calidad tienen un impacto directo en el negocio, de otra manera, no será una inversión rentable. ","date":"2025-02-17","objectID":"/ofertasqa/:1:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Las Reuniones: Flexibilidad y adaptado a la audiencia Las primeras reuniones son fundamentales, y es esencial adaptarse a tu audiencia. Por ejemplo, en una ocasión estábamos presentando una propuesta a un banco importante. Inicialmente, preparamos una presentación muy técnica sobre herramientas de automatización, pero al enterarnos de que el CIO estaría presente, incluimos argumentos centrados en el ROI y la reducción de los costes de infraestructura de pruebas. También, en la medida de lo posible, es totalmente recomendable tener una demo preparada. Ver algo en funcionamiento, aunque sea un prototipo, hace que pasemos del powerpoint (que lo aguanta todo), a algo tangible. Una demo bien ejecutada puede marcar la diferencia. Recuerdo varias presentaciones donde mostrábamos los beneficios del Visual Testing y cómo podría optimizar el proceso de entrega de nuevas versiones de una web. No era técnicamente compleja, pero ilustraba perfectamente el valor que podíamos aportar y daba pié a generar muchas conversaciones posteriores. ","date":"2025-02-17","objectID":"/ofertasqa/:2:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Metodología: El cambio cultural como pilar básico La implantación exitosa de prácticas de QA va más allá de las herramientas y procesos. Implica un cambio cultural significativo. En mi experiencia, las organizaciones que mejor adoptan las prácticas de calidad son aquellas donde comenzamos con equipos piloto pequeños y luego escalamos basándonos en resultados tangibles. Tenemos que entender que como consultores externos es más probable que encontremos resistencia al cambio. Por ello, resulta más efectivo que el cambio sea promovido por los propios compañeros de la organización. En mi experiencia siempre resulta más óptimo comenzar con pequeños equipos pilotos y tomarlos como modelo para el resto de la organización. Lo ideas es que ellos mismo se conviertan en evangelizadores dentro de su propia empresa. Esto siempre lo hemos llamado “mancha de aceite”. Un caso significativo fue la implementación de Contract Testing en una gran empresa. Comenzamos montado un grupo de práctica para liderar la implementación y tomar métricas de éxito de implantación e impacto en negocio. A su vez trabajamos mano a mano con equipo pilotos. En seis meses, el tiempo de entrega se redujo, y otros equipos comenzaron a solicitar ayuda. ","date":"2025-02-17","objectID":"/ofertasqa/:3:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Métricas y Seguimiento: Más allá de los bugs Un error común es centrarse exclusivamente en el número de bugs encontrados. En su lugar, recomiendo enfocarse en métricas que realmente importan al negocio. Por ejemplo, en un proyecto reciente, nuestro dashboard principal mostraba: Tiempo medio de entrega de nuevas funcionalidades Tasa de incidentes en producción Tiempo medio de recuperación ante fallos Frecuencia de despliegues exitosos Número de consultas al centro de soporte Tiempo dedicado a pruebas manuales Coste en infraestructura de pruebas Estas métricas demostraron claramente cómo la calidad impactaba directamente en los objetivos de negocio del cliente. ","date":"2025-02-17","objectID":"/ofertasqa/:4:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Conclusión La venta de proyectos de QA requiere un equilibrio entre visión técnica y comprensión del negocio. La clave está en demostrar cómo la calidad no es un coste adicional, sino una inversión que mejora la eficiencia operativa y contribuye directamente al éxito del negocio. Recuerda siempre que no estamos vendiendo pruebas; estamos vendiendo una mejora en la forma en que las organizaciones entregan valor a sus clientes. ","date":"2025-02-17","objectID":"/ofertasqa/:5:0","tags":["Negocio"],"title":"Cómo afrontar la venta de proyectos de QA en consultoría","uri":"/ofertasqa/"},{"categories":[],"content":"Un Enfoque Pragmático para Iniciar la Automatización de Pruebas","date":"2025-02-11","objectID":"/apitesting/","tags":["Unit testing"],"title":"Estrategia para introducir Testing Automatizado en equipos sin experiencia","uri":"/apitesting/"},{"categories":[],"content":"Un enfoque pragmático para empezar con la automatización de pruebas Un tema recurrente que me he encontrado varias veces es la pregunta de cómo introducir la automatización de pruebas en equipos que aún no lo están haciendo. Ya he comentado en otras ocasiones que hay varios factores que influyen. El primero de ellos es el contexto, y otro punto importante puede ser el orden en el que se intente abordar esta tarea. Típicamente, la recomendación casi universal es comenzar por el testing unitario; creo que es aquí donde podemos correr el riesgo de partir de un punto que no sea adecuado para el equipo. Tengo una opinión bastante firme sobre que el principal motivo por el que los equipos no hacen testing es porque no tienen los conocimientos suficientes para ello. Esto hace que sigan malas prácticas y, por tanto, lleva a la frustración en el medio plazo. Al final, esto termina en un abandono del testing automatizado. Voy a explicar un poco más esta idea y por qué creo que puede ser interesante aplicar otro enfoque. ","date":"2025-02-11","objectID":"/apitesting/:0:0","tags":["Unit testing"],"title":"Estrategia para introducir Testing Automatizado en equipos sin experiencia","uri":"/apitesting/"},{"categories":[],"content":"Empezar por unitarios es complicado Seamos claros: escribir un test unitario es técnicamente muy sencillo. Lo que no es tan fácil es establecer una estrategia de testing y hacer que una suite de pruebas sea mantenible, eficiente y siga buenas prácticas de programación. El error más típico es comenzar con pruebas unitarias, haciéndolas muy acopladas al código. Esto hace que sean muy frágiles y fallen ante cualquier mínimo cambio del código de producción. Es normal que, ante esta situación, los equipos sientan que están perdiendo el tiempo, se frustren y sientan que hacer tests les está ralentizando la entrega. Otro punto que puede generar fricción a nivel técnico es la gestión de dependencias. Es habitual que los equipos no sepan o no sigan las mejores prácticas a la hora de mockear las dependencias externas, con lo que el código se vuelve, de nuevo, muy rígido y difícil de mantener. Por eso digo que, aunque la recomendación sea comenzar con pruebas unitarias, si no se tiene una buena base de conocimientos, puede producir frustración, malos resultados y abandono. ","date":"2025-02-11","objectID":"/apitesting/:1:0","tags":["Unit testing"],"title":"Estrategia para introducir Testing Automatizado en equipos sin experiencia","uri":"/apitesting/"},{"categories":[],"content":"Empezar por las APIs Para un equipo que no tiene nada de testing automatizado, ¿por qué creo que empezar con las APIs puede ser la mejor opción? Validamos reglas de negocio, es decir, el núcleo de nuestro sistema. Por lo que estas pruebas ya deberían ser útiles como batería de regresión y/o prueba de humo. Los tests unitarios pueden ser más abstractos, pero, desde un punto de vista práctico, el primer test de integración ya está validando reglas de negocio. Estas pruebas suelen ser más resistentes a los cambios en código. Evitaríamos la frustración generada por refactorizaciones. Entendemos mejor el propósito de las pruebas, ya que nos centramos en el comportamiento esperado y no tanto en su implementación: Test behaviour, not implementation A medida que escribamos más tests, iremos aprendiendo técnicas y estrategias básicas de automatización, como las siguientes: Uso de hooks (Before, After, BeforeEach, etc.) Elección correcta de aserciones Atomicidad de las pruebas, evitando dependencias Manejo adecuado de conjuntos de datos para pruebas Es posible que tengamos que gestionar dependencias externas; iremos aprendiendo cómo lidiar con estos casos Técnicas de reutilización de pruebas y cómo hacerlas más mantenibles Selección de casos límite y testing negativo Integración de pruebas en pipelines de CI Una vez que tengamos una buena base de conocimientos de testing, será más sencillo retomar el testing unitario de manera efectiva y adecuada. De seguir por esta línea, es probable que lleguemos a un punto donde la pirámide de testing tenga forma de trofeo. [Imagen de la pirámide de testing en forma de trofeo] ","date":"2025-02-11","objectID":"/apitesting/:2:0","tags":["Unit testing"],"title":"Estrategia para introducir Testing Automatizado en equipos sin experiencia","uri":"/apitesting/"},{"categories":[],"content":"Conclusión En definitiva, comenzar con las pruebas de API puede hacer que tengamos unos “quick wins” inmediatos y dispongamos rápidamente de una red de seguridad que nos permita validar nuevas versiones. Esto es muy importante para que los equipos comiencen a ver la utilidad y ventajas de tener pruebas automatizadas. Además, y también fundamental, el equipo irá adquiriendo técnicas y estrategias de testing básicas. Con ello, introducirse en el testing unitario debería generar menos fricción y sería el siguiente paso para que estos equipos comiencen a tener ciclos de retroalimentación más cortos. ","date":"2025-02-11","objectID":"/apitesting/:3:0","tags":["Unit testing"],"title":"Estrategia para introducir Testing Automatizado en equipos sin experiencia","uri":"/apitesting/"},{"categories":[],"content":"Crear espacios donde compartir conocimiento dentro de las organizaciones es una necesidad estratégica fundamental","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Las Comunidades de Práctica Técnica: Catalizadores del Aprendizaje Organizacional Hoy en día, sea en la disciplina que sea, resulta prácticamente imposible estar al día de todos los avances tecnológicos, conocer nuevos frameworks o herramientas. Por lo que, en este contexto, compartir conocimiento de manera ágil, dinámica y accesible resulta fundamental. Dentro de una empresa, las comunidades de práctica técnica emergen como espacios vitales donde la curiosidad florece y la diversidad de perspectivas saca a la luz nuestros “unknown unknowns” - aquello que ni siquiera sabíamos que desconocíamos. Estos ecosistemas de aprendizaje no solo cultivan el conocimiento técnico; transforman nuestra manera de descubrir, cuestionar y crecer colectivamente. ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:0:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Reduciendo las “Unknown Unknowns” Uno de los mayores desafíos en el desarrollo profesional es identificar aquello que no sabemos que desconocemos. Las comunidades de práctica actúan como faros que iluminan estas áreas oscuras del conocimiento: Facilitan la exposición natural a nuevos conceptos y tecnologías Crean espacios seguros para admitir desconocimiento y hacer preguntas Permiten descubrir gaps de conocimiento a través del diálogo entre compañeros ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:1:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Cultivando la Consciencia Técnica Las comunidades de práctica no solo exponen nuevo conocimiento, sino que ayudan a contextualizar su relevancia: Mapean el panorama tecnológico actual y futuro Identifican tendencias emergentes y su impacto potencial Construyen un entendimiento compartido de mejores prácticas ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:2:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Fomentando la Curiosidad como Motor de Innovación La curiosidad individual es la clave del aprendizaje continuo. Las comunidades de práctica la estimulan mediante: La creación de un ambiente que promueve las preguntas y el debate El reconocimiento del valor del aprendizaje mediante la experimentación La exposición a diferentes perspectivas y enfoques técnicos ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:3:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Estructurando el Camino del Aprendizaje No basta con despertar la curiosidad; es crucial proporcionar rutas claras para el desarrollo: Diseño de roadmaps de aprendizaje personalizados Identificación de recursos y materiales de calidad Mentoría y acompañamiento Creación de casos prácticos que refuerzan el aprendizaje ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:4:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Conectando los Puntos: De la Teoría a la Práctica Las comunidades de práctica funcionan como catalizadores que transforman el conocimiento teórico en aplicaciones prácticas: Facilitan la conexión entre diferentes dominios de conocimiento Promueven la experimentación y aplicación práctica Crean espacios para compartir experiencias y lecciones aprendidas ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:5:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Impacto Organizacional El valor de las comunidades de práctica trasciende el desarrollo individual: Aceleran la curva de aprendizaje organizacional Reducen la duplicación de esfuerzos y errores Fortalecen la resiliencia técnica de la organización Mejoran la retención del talento Incrementan la velocidad de innovación ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:6:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Conclusión Las comunidades de práctica técnica son más que grupos de intercambio de conocimiento; son ecosistemas vivos que transforman la manera en que las organizaciones aprenden, innovan y evolucionan. Su poder radica en su capacidad para convertir el aprendizaje individual en conocimiento colectivo, creando una cultura de curiosidad y mejora continua que impulsa el crecimiento sostenible de la organización. La inversión en el desarrollo y fortalecimiento de estas comunidades no es un gasto, sino una necesidad estratégica para cualquier empresa que busque mantener su competitividad. ","date":"2025-01-08","objectID":"/comunidades-practica-tecnica/:7:0","tags":["Cultura"],"title":"La Importancia de las Comunidades de Práctica en Organizaciones","uri":"/comunidades-practica-tecnica/"},{"categories":[],"content":"Consejos para preparar y hacer entrevistas técnicas","date":"2024-11-21","objectID":"/entrevistas/","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Después de hacer muchas entrevistas técnicas, lo más importante que he aprendido es que, tienes delante a una persona que probablemente esté nerviosa y que merece que le dediques tiempo y atención de calidad. Es una oportunidad para conocer a la persona detrás del CV, identificar sus motivaciones y entender cómo puede aportar al equipo En este artículo comparto un enfoque práctico, basado en mi experiencia, para estructurar y conducir entrevistas técnicas que sean claras, eficientes y justas, tanto para el entrevistador como para el candidato. ","date":"2024-11-21","objectID":"/entrevistas/:0:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Antes de la entrevista Normalmente, la persona ya habrá pasado una entrevista previa con RR. HH. En esta, se habrá verificado que la experiencia, aptitudes, conocimientos básicos, soft skills mínimas y pretensiones económicas están alineadas con el puesto vacante. En mi caso, para no ir condicionado a la entrevista, no me leo el informe de RR. HH. Únicamente abro su CV y pongo especial interés en las siguientes cuestiones: Estructura clara y concisa Un CV mal estructurado o confuso me da pistas sobre la capacidad de síntesis y organización de la persona Descripción de tareas y objetivos conseguidos Una lista de tecnologías utilizadas no me aporta demasiado Proyectos interesantes o experiencias fuera de lo común Pueden salir conversaciones interesantes y ayudan a conocer mejor las motivaciones de la persona Tiempo que ha pasado en cada empresa A priori, ni bueno ni malo. Pero siempre prefiero preguntar tanto por estancias muy largas como por cambios constantes. ","date":"2024-11-21","objectID":"/entrevistas/:1:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Durante la entrevista Es muy importante tener claras las necesidades y experiencia necesaria para la vacante abierta. Es fundamental que adaptemos tanto el tono como el nivel de detalle de las preguntas que hagamos. ","date":"2024-11-21","objectID":"/entrevistas/:2:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Presentaciones y estructura Comienza por presentarte brevemente: Quién eres, cuánto llevas en la empresa y tu cargo. Después de que la otra persona se presente, haz una par de preguntas para romper el hielo orientadas a que la otra persona libere la tensión que pueda tener. Puedes aprovechar para preguntarle por algo básico sobre su ciudad, si ha pasado un buen día, si ha tenido un buen fin de semana/vacaciones, etc. Después de hacer muchas entrevistas técnicas, he visto que la gente suele saltar inmediatamente a hablar de herramientas, frameworks, librerías, etc, y apenas habla de su experiencia y motivaciones. Para que esto no pase, me gusta comentarles la estructura que sigo en las entrevistas: Experiencia general Motivaciones profesionales Parte técnica Preguntas situacionales ","date":"2024-11-21","objectID":"/entrevistas/:2:1","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Al lío Una vez que nos metemos en harina, se trata de establecer una conversación fluida y natural. Siempre de igual a igual. En cada parte, me centro en estos aspectos Cuéntame tu experiencia y proyectos interesantes Aunque me haya leído su CV, prefiero que me lo cuenta para poder evaluar su capacidad de expresión y síntesis Recalco que no hacen falta que den demasiados detalles técnicos, ya que profundizaremos en ellos más adelante Voy tomando notas sobre experiencia, herramientas utilizadas y dudas Me centro en la estrategia de los hitos técnicos más relevantes Pregunto por por las causas que hicieron que algunos proyectos no salieran bien ¿Qué motiva en tu carrera profesional? Por qué no estás consiguiendo cumplir tus objetivos en la empresa actual ¿Has hecho algo para intentar mejorar tu situación actual.? ¿Hasta dónde lo has escalado? Parte técnica Preguntas adaptadas a experiencia requerida para el puesto Pidiendo nivel de detalle adecuado al nivel que se requiere Profundizar en las cuestiones más relevantes para la vacante Tratar de detectar puntos flojos o carencias en tecnología relevante para el puesto Establecer situaciones para conocer el enfoque de la persona Conocer estrategias de priorización Pensamiento lateral Descomposición de problemas en tareas más pequeñas Alineamiento con negocio Para que os hagáis una idea, uso este formato para ir tomando notas a mano. ","date":"2024-11-21","objectID":"/entrevistas/:2:2","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Consejos Establece en todo momento un tono cordial y cercano Debes pasar más tiempo escuchando que hablando Haz preguntas claras. Si algo no se entiende, reformula la pregunta Si la persona “divaga” o es demasiado generalista, házselo saber y pide que profundice en el detalle Usa lenguaje claro y sin tecnicismos constantes Si la persona da respuestas muy largas, hazle saber que debe concretar más las respuestas, de lo contrario os quedaréis sin tiempo de entrevista. ","date":"2024-11-21","objectID":"/entrevistas/:3:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Final de la entrevista Siempre dejo un espacio para que la persona pueda preguntarme cualquier duda o contarme algo más haya salido durante la entrevista. Si tengo claro que la persona no encaja en el puesto por motivos técnicos, intento hacérselo saber de la manera más suave pero clara posible. Si están abiertas a recibir a feedback, normalmente sí, trato de darles algunos consejos sobre formación, herramientas o plan de carrera en función de los objetivos que persigan. En el caso de que todo vaya bien, también les digo que por mi parte se puede avanzar en el proceso y que la persona de RR. HH. contactará con ellos para siguientes pasos. Es ahora cuando leo el informe de RR. HH. para comprobar si coincide con mis impresiones. Principalmente en cuánto a motivación de la persona, capacidad de comunicación, gestión de conflictos y liderazgo. En cuanto a escribir el informe y dar la “nota” final. Hay muchas opiniones y literatura sobre cuándo es mejor hacerlo. Mi consejo es que seas consciente de tu estado de ánimo, cansancio y sesgos que te puedan afectar en el momento de hacerlo. En mi caso, en la medida de lo posible, intento escribir las notas justo al finalizar la entrevista. Me funciona mejor tener la información fresca en la cabeza y, sobre todo, tener en cuenta esa “primera impresión” que me ha causado la persona. He comprobado que cuando lo escribo al día siguiente, he dado menos importancia a alguna “red flag” que había detectado durante la entrevista. Esto, a la larga, ha pasado factura en algunos casos. ","date":"2024-11-21","objectID":"/entrevistas/:4:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Conclusiones Si tuviera que dar algunos consejos, serían: Empatiza con la persona que tienes delante y trata de ayudarla Favorece una comunicación fluida Ten claros los requisitos de la vacante y enfoca tus preguntas a ello Si tienes dudas sobre la vacante o tareas a desarrollar pregunta Adapta la entrevista a la experiencia requerida para la vacante No generes falsas expectativas en el candidato Eres la cara de la empresa, vigila la imagen que transmites Trata de ser justo y busca el mejor momento para escribir el informe de la entrevista Como consejo final, aunque estés haciendo una entrevista técnica, las soft skills son importantes, por tanto: No des de paso a ninguna persona con la que no te gustaría trabajar. Aunque no vaya a formar parte de tu equipo. Esto es fundamental para mantener la cultura y buen ambiente de trabajo en cualquier empresa. ","date":"2024-11-21","objectID":"/entrevistas/:5:0","tags":["Carrera"],"title":"Framework para entrevistas técnicas","uri":"/entrevistas/"},{"categories":[],"content":"Cómo poner en práctica un plan de carrera de manera efectiva","date":"2024-06-03","objectID":"/pdp-2/","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"En un artículo anterior, escribí sobre los factores clave en el crecimiento profesional de una persona y cómo estos deberían quedar reflejados en el plan de carrera de la organización. Ahora, una vez escrito dicho plan, me gustaría hablar de cómo llevarlo a la práctica de manera efectiva. ","date":"2024-06-03","objectID":"/pdp-2/:0:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Objetivos del plan de carrera Empecemos por lo más básico. ¿Para qué sirve un plan de carrera? Principalmente, debería ser la guía que marque el crecimiento profesional de una persona dentro de una determinada empresa. Resalto la palabra guía porque no debe usarse como una checklist estática, sino como un documento que establezca un marco general de crecimiento, proporcionando las pautas para evolucionar en la organización. Para ello, es importante que se detalle de la manera más clara posible lo que se espera de una persona en cada nivel y cuáles son las aptitudes y actitudes más valoradas. Este punto es crucial, ya que cualquier persona debería ser capaz de identificarse dentro de un nivel y saber, de manera más o menos clara, qué debe trabajar para llegar al siguiente. ","date":"2024-06-03","objectID":"/pdp-2/:1:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Retos En mi experiencia, al poner en práctica un plan de carrera en el mundo IT, se plantean los siguientes retos: ","date":"2024-06-03","objectID":"/pdp-2/:2:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Damos demasiada importancia a la parte técnica Lo comenté en el artículo anterior y creo que, al crecer profesionalmente, damos demasiada importancia a la parte técnica. Obviamente, es algo fundamental en el mundo IT, sobre todo en niveles iniciales, pero a medida que adquirimos experiencia, la autonomía, buena comunicación, resiliencia y liderazgo se vuelven mucho más importantes. Centrarse demasiado en aspectos técnicos dentro del plan de carrera es algo potenciado por ambas partes: mentor y mentorizado. Esencialmente, porque es algo más sencillo de conseguir y evaluar. Es decir, siempre me ha recordado la frase: “Tendemos a darle más importancia a lo que podemos medir.” Los objetivos relacionados con la parte técnica siempre serán más sencillos de medir de manera objetiva que otros relacionados con habilidades blandas. Además, estos últimos requerirán mucho más apoyo y seguimiento. ","date":"2024-06-03","objectID":"/pdp-2/:2:1","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Expectativas personales vs. realidad de la empresa. Todo plan de carrera debe estar alineado con la organización en la que se desarrolla. Por tanto, es fundamental que tenga en cuenta la realidad o el momento de la misma. También deberían considerarlo las personas sobre las que se aplica. Esto último no siempre resulta tan evidente. Muchas personas solo tienen en cuenta sus preferencias personales en cuanto a gustos o desarrollo profesional deseado. Algunos ejemplos podrían ser: Quiero aprender Kubernetes Me gustaría liderar un grupo de arquitectura Me interesa la IA y me gustaría integrarla en los proyectos Esto no tiene por qué ser algo malo en sí. Tener ganas de progresar, ambición profesional o querer ampliar conocimientos, de partida siempre es algo positivo. Sin embargo, tendremos que analizar si en el momento actual de la empresa es una opción realista. Por encima de todo, no deberíamos crear falsas expectativas sobre el plan de carrera de una empresa y, llegado el caso, hacerle entender que su plan podría no cumplirse dentro de la organización actual y que lo mejor sería buscar opciones fuera. ","date":"2024-06-03","objectID":"/pdp-2/:2:2","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"No hay un plan de acción claro Como decía antes, el plan de carrera debe ser una guía que marque el camino a seguir para crecer dentro de la organización. Normalmente, el responsable o mentor de cada persona deberá ayudar a recorrer ese camino. Esto no siempre es sencillo y, en muchas ocasiones, cuesta definir un plan de acción claro y realista. Idealmente, se deberían establecer metas con un seguimiento periódico. Para ello, una metodología tipo OKR puede ser de gran ayuda. ","date":"2024-06-03","objectID":"/pdp-2/:2:3","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"El plan de acción choca con el día a día Unido al punto anterior, otro de los retos más importantes al establecer un plan de acción es que sea compatible con el trabajo diario de las personas. Idealmente, siempre debemos intentar buscar acciones que estén alineadas con las tareas del día a día de la persona, de forma que tratemos de llevarlas a un siguiente nivel. Si, por el contrario, su plan de acción pasa por realizar actividades fuera de su trabajo habitual, como implicarse en ofertas técnicas, realizar entrevistas, etc., deberemos buscar opciones para compatibilizarlas de manera que causen poco impacto. Al igual que con las dietas, deberemos tratar de maximizar la adherencia al plan. Es decir, si las acciones planteadas son poco realistas o exigen un sobreesfuerzo demasiado elevado, es probable que queden abandonadas y creen frustración. ","date":"2024-06-03","objectID":"/pdp-2/:2:4","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Puesta en marcha La puesta en marcha del plan de carrera consta de cuatro fases: ","date":"2024-06-03","objectID":"/pdp-2/:3:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Identificación del gap Como punto de partida, deberemos trabajar con la persona para identificar y priorizar los aspectos más importantes para llegar al siguiente nivel. Es importante que ambas partes lo vean de igual manera y que los podamos documentar. ","date":"2024-06-03","objectID":"/pdp-2/:3:1","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Factores de motivación Existe bastante literatura sobre cuáles son los principales factores de motivación (intrínseca y extrínseca) de las personas. Desde mi experiencia, los más relevantes son: Autonomía: Control sobre el trabajo y poder tomar decisiones importantes sobre cómo se realiza. Maestría: Mejorar y perfeccionar nuestras habilidades. Propósito: Contribuir y sentirse parte de algo más grande que nosotros mismos, encontrando significado y valor a nuestro trabajo. Reconocimiento: Recibir validación, aprecio y recompensa por nuestros esfuerzos y logros. He añadido el factor del reconocimiento, ya que no siempre se suele incluir. Es importante tener en cuenta que estamos hablando de trabajos y que, por tanto, estamos tratando con profesionales. Es decir, es perfectamente legítimo y entendible que haya personas cuya motivación principal sea conseguir ascensos, mejorar su CV, ser reconocidos como referentes, etc. En estos casos, deberemos buscar opciones win-win, permitiendo que la persona desarrolle su potencial dentro de la empresa y aporte el máximo valor posible. Por supuesto, los cuatro no son factores excluyentes. De hecho, lo más probable es que todos tengamos un poco de cada uno, pero es cierto también que habitualmente solemos tener un factor más marcado que el resto. En este caso, se trata de identificar cuál es la principal fuente de motivación de la persona e intentar elaborar un plan de acción acorde. ","date":"2024-06-03","objectID":"/pdp-2/:3:2","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Plan de acción Unido a lo anterior, nos faltaría establecer un plan de acción. A ser posible, alineado con la realidad de la empresa y los factores motivantes de la persona. Esta parte no siempre es sencilla, pero es importante que sea acordada por ambas partes y quede reflejada en algún documento sobre el que se pueda hacer seguimiento. Para ello, una metodología tipo OKR puede resultar de utilidad, puesto que nos ayudará a establecer objetivos medibles y ambiciosos, además de facilitar la comprobación de avances de manera periódica. ","date":"2024-06-03","objectID":"/pdp-2/:3:3","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Seguimiento Esta fase es importante. Mediante conversaciones deberemos detectar progresos, dificultades o estancamientos en el plan de carrera. Es importante que actuemos como facilitadores del avance y podamos actuar cuanto antes ante cualquier bloqueo. ","date":"2024-06-03","objectID":"/pdp-2/:3:4","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Conclusión Implementar un plan de carrera efectivo requiere más que solo escribirlo; necesita un compromiso constante y un enfoque flexible para adaptarse a las necesidades individuales y organizativas. Aquí resumimos los pasos clave y consideraciones para su éxito: ","date":"2024-06-03","objectID":"/pdp-2/:4:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Resumen de pasos clave Identificación del gap: Detectar y priorizar las áreas de mejora. Motivación: Comprender los factores de motivación de cada persona. Plan de acción: Crear un plan claro y alcanzable, alineado con la empresa y la motivación del empleado. Seguimiento: Monitorizar y ajustar el plan según el progreso y los desafíos encontrados. ","date":"2024-06-03","objectID":"/pdp-2/:4:1","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Consideraciones finales Flexibilidad: Un plan de carrera no debe ser rígido; debe permitir ajustes según las circunstancias cambiantes de la empresa y del empleado. Soft skills: No subestimar la importancia de las habilidades blandas. Estas son cruciales para el desarrollo a largo plazo. Realismo: Asegurarse de que los objetivos sean alcanzables dentro del contexto de la organización para evitar frustraciones y falsas expectativas. El éxito de un plan de carrera depende de la colaboración y el diálogo continuo entre mentor y mentorizado, y de una alineación clara con la realidad empresarial. Solo así se puede asegurar un crecimiento profesional sostenido y valioso para ambas partes. ","date":"2024-06-03","objectID":"/pdp-2/:4:2","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte II","uri":"/pdp-2/"},{"categories":[],"content":"Principales aspectos que marcan en desarrollo profesional de una persona en el mundo IT","date":"2024-05-08","objectID":"/pdp-1/","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Hace unos años, tuve que definir las características básicas de cada nivel del equipo de Quality Engineering. Lo usábamos como plan de carrera, pero ya necesitaba una actualización, por lo que este año, me ha tocado revisarlo. Con unos años más de experiencia, este proceso me ha vuelto a dar la oportunidad de reflexionar sobre qué debe ser un plan de carrera y qué es lo que marca realmente el desarrollo profesional de una persona dentro de una empresa. ","date":"2024-05-08","objectID":"/pdp-1/:0:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"¿Qué marca el desarrollo profesional de una persona en una empresa? En mi opinión, los factores que marcan el crecimiento profesional son principalmente 4 y los pondría por este orden de importancia Autonomía Impacto y alineamiento con valores Liderazgo y comunicación Conocimientos técnicos Sé que este orden, dentro del sector IT, puede resultar extraño o no convencer a todo el mundo. Sin embargo, después de varios años siendo manager y trabajando con diferentes perfiles, creo firmemente que el factor humano tiene muchísimo más peso que el técnico a la hora de progresar. ","date":"2024-05-08","objectID":"/pdp-1/:1:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Autonomía Al igual que no medimos el desarrollo vital de un niño por su altura, sino por su nivel de autonomía a la hora de realizar tareas y desenvolverse en el mundo real (situaciones impredecibles) lo mismo deberíamos hacer con las personas que trabajan en IT. Este es el punto fundamental que marca el crecimiento profesional y, por tanto, el que más se debería fomentar. Por ello, este tendría que ser el aspecto que más peso tenga dentro de un plan de carrera y sobre el que más explícito se deba ser es la descripción. Es decir, que las expectativas sobre autonomía en cada nivel queden reflejadas de la manera más clara posible. Con esto, iríamos desde una persona sin apenas experiencia laboral que debe ser acompañada y tutorizada casi de manera constante hasta otras que lideran iniciativas en contextos especialmente complejos, sin supervisión. ","date":"2024-05-08","objectID":"/pdp-1/:1:1","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Impacto y valores En cualquier compañía, a medida que avanzamos, es de esperar que nuestro impacto tanto en las personas que nos rodean como en la propia organización sea cada vez mayor. Nuestro tiempo deberá estar cada vez más centrado en trabajo que genere un alto valor en producto/cliente o en que mejore el rendimiento de las personas al rededor nuestro. Por otra parte, la seniority también debería ir unida al alineamiento con los valores de la empresa. A medida que nuestra visibilidad e impacto sea mayor, más hincapié deberemos poner en que esas personas sean modelos para el resto de la organización. Que se conviertan en el “ejemplo” a seguir por el resto. A nivel de plan de carrera, iría desde el alineamiento básico con los valores de la empresa hasta el “disagree and commit” en niveles más senior. ","date":"2024-05-08","objectID":"/pdp-1/:1:2","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Liderazgo y comunicación No todo el mundo quiere ser Manager, gestionar a otras personas, hacerse cargo del seguimiento de los proyectos o dar charlas en eventos. Este punto no se trata tanto de eso, sino de ser capaz de alinear a las personas para conseguir un objetivo común y de comunicarse eficazmente. De primeras, puede que management y liderazgo parezcan lo mismo y es cierto que en ciertas circunstancias se puedan solapar, pero creo que lo que en un plan de carrera se debe poner peso es en la capacidad de orientarse a objetivos y conseguir que un grupo de personas trabaje de manera sincronizada para conseguirlos. En este tipo de situaciones es mucho más relevante la capacidad de motivar, la visión a largo plazo y un enfoque estratégico. Para conseguirlo, obviamente, será fundamental que nuestras capacidades de comunicación sean adecuadas. Esto no siempre quiere decir que seamos unos grandes oradores, sino que comuniquemos objetivos, bloqueos, dudas, plazos, etc. de manera clara, eficiente y proactiva. Esta capacidad es básica para progresar en cualquier empresa. ","date":"2024-05-08","objectID":"/pdp-1/:1:3","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Conocimientos técnicos Nos encontramos en un entorno tecnológico, por lo que, obviamente, la base técnica es esencial. Y, por supuesto, a medida que progresemos deberán ser conocimientos más avanzados. Pero esto no quiere decir que debamos ser expertos en las últimas herramientas y frameworks, sino el ser capaces de aplicar las soluciones técnicas adecuadas, y a ser posible, óptimas, para problemas técnicamente complejos, en entornos de incertidumbre. Esto, esencialmente, implica tener una visión pragmática y no dogmática de la tecnología. Adoptar una mentalidad de constante aprendiz y saber evaluar pros y contras de cada solución. En cuanto a esta parte, mi opinión es que un plan de carrera debería nombrar el mínimo número posible de herramientas o tecnologías concretas y centrarse más conceptos que formen la base técnica de la disciplina Por ejemplo: Soltura en desarrollo de pruebas automáticas web VS. Destreza con Selenium Construcción de pipelines de CI VS. Manejo avanzado de Jenkins Desarrollo de aplicaciones modelo MVC y SPA VS Conocimientos de Angular/React ","date":"2024-05-08","objectID":"/pdp-1/:1:4","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Alineamiento con la empresa No debemos olvidar que un plan de carrera siempre estará ligado a una empresa. Es decir, tendrá un contexto determinado que mostrará el camino a seguir para progresar dentro de una determinada organización. Por tanto, un buen plan de carrera, realista, estará ligado a las características y necesidades concretas de la misma. Por otra parte, no debemos pensar que si no progresamos dentro de una compañía sea porque seamos malos profesionales. Pueden existir diferentes motivos, y es posible que el contexto no lo permita. También, el plan de carrera deberá estar alineado y reflejar los valores de la empresa de alguna manera. ¿A qué se le da más peso? ¿Qué tipo de personas queremos? ¿Qué cualidades queremos que desarrollen una vez dentro?. Por ello, no deberían ser iguales en una startup, big coorporate, de otras compañías dedicadas a la innovación, desarrollo de producto u otras centradas en la investigación y excelencia técnica. Creo que, en general, deberíamos huir de planes de carrera excesivamente generalista o copiados de otras empresas. Hacer esto puede resultar contraproducente y generar falsas expectativas. Además de que no se pueda evolucionar al siguiente nivel por falta de oportunidades o que los managers no sean capaces de ayudar a la evolución al siguiente nivel En resumen, un plan de carrera que no represente la realidad de la empresa, es un problema que afecta a todo el mundo. ","date":"2024-05-08","objectID":"/pdp-1/:2:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Cerrando Un plan de carrera debe tener en cuenta el contexto específico de la empresa y reflejar los valores de la misma. A su vez, el desarrollo profesional dentro del sector IT no debe estar centrando únicamente en aspectos técnicos. Aspectos como autonomía, capacidad de liderazgo y comunicación efectiva son fundamentales en la progresión. ","date":"2024-05-08","objectID":"/pdp-1/:3:0","tags":["Carrera"],"title":"Definiendo un plan de carrera - Parte I","uri":"/pdp-1/"},{"categories":[],"content":"Las pruebas negativas son necesarias para descubrir comportamientos inesperados de nuestro código","date":"2024-02-05","objectID":"/negativetesting/","tags":["Quality Assurance"],"title":"Testing defensivo","uri":"/negativetesting/"},{"categories":[],"content":"Un tester hace mejores pruebas que un desarrollador El otro día volví a ver un debate sobre si los testers hacían mejores pruebas que la gente de desarrollo y, como este es un tema recurrente, voy a intentar dar mi punto de vista. Empecemos por el principio: ¿Qué entendemos por buenas pruebas? ¿Las que descubren bugs? ¿Las que aumentan la cobertura funcional? ¿Las que están alineadas con los objetivos de negocio? ¿Las que minimizan los riesgos (seguridad, monetarios, legales, etc.)? ¿Las que mejoran la experiencia de usuario (UX, performance, diseño, etc.)? Por supuesto, no son excluyentes, pero podemos intuir que las skills necesarias en cada uno de los puntos puede variar. Ahora, analicemos qué factores pueden influir en que un dev y un tester no prueben de la misma manera una aplicación. Objetivos desalineados: A unos les miden por reportar incidencias a otros por terminar historias de usuario Skills diferentes: El testing, necesita de heurísticas y conocimientos específicos Efecto del apego: Los desarrolladores pueden no estresar el sistema por no ver como “su creación” falla Sesgos: No todos interpretamos la información de la misma manera. La forma en que entendemos un requerimiento y los transformamos en caso de prueba puede diferir. Unknowns/Unknowns: Siempre hay información o situaciones que ni siquiera conocemos. Después de esta introducción, ¿podemos decir que un tester hace mejores pruebas que un dev?. Pues no necesariamente, pero para mí, la clave puede estar en el Testing negativo ","date":"2024-02-05","objectID":"/negativetesting/:1:0","tags":["Quality Assurance"],"title":"Testing defensivo","uri":"/negativetesting/"},{"categories":[],"content":"Origen de los errores El código, siempre es el código. Idealmente, no debería haber diferencia entre el el comportamiento esperado y el código implementado. Pero sabemos que, por muchos factores, eso es prácticamente imposible. Ahora, como puede verse en el diagrama, básicamente pueden darse dos situaciones de error: El comportamiento deseado no está implementado El código hace cosas que no debería Detectar los errores en el primer caso es mucho más sencillo que en el segundo. Bastaría con cubrir los happy path de las historias de usuario y comprobar que todo funciona como se espera. Habitualmente, estas pruebas son fácilmente automatizables y, desde mi punto de vista, no se requieren unas skills avanzadas para este tipo de testing. Podríamos decir que este tipo de pruebas entran más en lo que podríamos llamar checking en lugar de testing. Por tanto, no debería haber una diferencia significativa en que las pruebas las realice un tester o un dev. Lo realmente complejo está en el segundo caso. Detectar comportamientos no esperados del código implican hacer testing negativo ","date":"2024-02-05","objectID":"/negativetesting/:2:0","tags":["Quality Assurance"],"title":"Testing defensivo","uri":"/negativetesting/"},{"categories":[],"content":"La importancia del testing negativo El impacto de los comportamientos no esperados suele tener unas consecuencias impredecibles sobre los sistemas y es la raíz de las grandes crisis de las empresas. Estos problemas suelen estar relacionados con: Fallos de seguridad, elevación de privilegios, workflows inconsistentes, errores de concurrencia, condiciones de carrera, filtrado de datos, etc. Es en este punto donde sí que creo que un perfil de testing puede aportar un plus sobre alguien de desarrollo, por varios motivos: Conoce heurísticas específicas para detectar casos negativos POV: Cuando has implementado una funcionalidad, resulta complicado pensar que la codificación no es correcta Conocimientos en herramientas específicas de estrés de sistemas (performance, fuzzy testing, seguridad, etc.) Experiencias previas en testing de sistemas similares ","date":"2024-02-05","objectID":"/negativetesting/:3:0","tags":["Quality Assurance"],"title":"Testing defensivo","uri":"/negativetesting/"},{"categories":[],"content":"Técnicas para hacer testing negativo Algunas de las técnicas más habituales para realizar testing negativo son: “Qué pasaría sí”: (Error guessing) Identificar posibles situaciones de error o de riesgo elevado e intentar reproducirlas Exploratory Testing: Sesiones en las que el tester puede evalúa y aprende sobre el sistema de manera simultánea Pair/Mob Testing: Sesiones en las que se evalúan funcionalidad de manera colaborativa y se resuelven dudas en el momento Fuzzy Testing: Generar, automáticamente, entradas pseudoaletorias en busca de comportamientos no deseados Pairwise testing: Buscar combinaciones de variables que aumenten la probabilidad de encontrar errores Pruebas de transición de estados: Intentar de producir transiciones de estados no permitidas Análisis de casos límite ","date":"2024-02-05","objectID":"/negativetesting/:4:0","tags":["Quality Assurance"],"title":"Testing defensivo","uri":"/negativetesting/"},{"categories":[],"content":"Recopilación de charlas sobre testing, QA y Test Automation","date":"2023-11-10","objectID":"/talks/listadocharlas/","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Comunidad NorthemQuality Canal de Northem Quality ","date":"2023-11-10","objectID":"/talks/listadocharlas/:1:0","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Entrevistas ","date":"2023-11-10","objectID":"/talks/listadocharlas/:2:0","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Ni cero, ni uno: QA, QE, Agile Testing - Entrevista con Fran Moreno Evento: Podcast de Carlos Blé - Ni Cero, Ni Uno Año: 2023 Descripción: Charla con Carlos Blé donde hablo sobre cómo incluir el testing el proyectos, construir en equipo de calidad en una consultora, context-driven-testing, cómo aplicar un enfoque preventivo en las pruebas, etc. También menciono y eventos y personas interesantes a las que seguir. Enlace: Escuchar en Spotify ","date":"2023-11-10","objectID":"/talks/listadocharlas/:2:1","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Mis charlas ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:0","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Antipatrones más comunes en la automatización de pruebas Evento: EDD - Extremadura Digital Day Año: 2023 Descripción: Análisis de las prácticas como: uso de Cucumber, abuso de pruebas end to end, no tener CI, centrarse en cobertura unitaria, y los problemas que pueden generar a largo plazo. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:1","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Agile Testing en Empresas Evento: Athlantic Tech Talks - Universidad de Informática de Coruña Año: 2023 Descripción: Las aproximaciones de testing clásicas no encajan en un contexto donde prima el time to market y la entrega rápida. Veremos cómo el Agile Testing puede ayudar en un entorno empresarial. Hablaremos de CI, Shift-left, Context Driven, sesgos en las pruebas y más. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:2","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Mejora el desarrollo de microservicios con contract testing Evento: SNGULAR - Oficinas Coruña Año: 2022 Descripción: Mi compañero José Maciñeiras y yo, hacemos un repaso sobre las ventajas de la utilización de contract testing en arquitecturas distribuidas y comparamos los frameworks de Contract Testing más utilizados en Java: Pact y Spring Cloud Contract Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:3","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Ya no hay excusas para no usar contract testing Evento: VLCTesting Año: 2022 Descripción: El contract testing, desde un enfoque consumer driven, puede ser una técnica difícil de introducir en equipos poco maduros, proyectos muy avanzados con un gran número de pruebas ya automatizas o simplemente en un contexto API centric. En esta charla veremos cómo resolver estar casuísticas con el enfoque “Bi-directional Contract Testing” propuesto por Pactflow (Pact) Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:4","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"The path to automation heaven Evento: Liferay - Mes del QA Año: 2022 Descripción: Repaso sobre buenas prácticas a la hora de automatizar pruebas: Estrategia, refactoring, uso de datos pseudo-aleatorios, mocking, etc. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:5","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Mesa redonda sobre testing Evento: Liferay - Mes del QA Año: 2022 Descripción: Charla junto a gente de Liferay y PanelSistemas sobre el estado del QA en el mercado, cómo iniciarse en el testing y futuro. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:6","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Entrevista con Nadia Cavalleri Evento: Canal de Youtube de Nadia Año: 2021 Descripción: Charla junto a mi compañero, Aritz sobre cómo iniciamos la comunidad de NorthemQuality, estado actual de testing, futuro de la profesión, etc. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:7","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Sesgos cognitivos en las pruebas. El lado más humano del testing Evento: TestingUy Año: 2020 Descripción: El testing va a más allá de la parte puramente técnica. La visión holística del sistema y la propia percepción subjetiva del sistema a evaluar hacen que los sesgos jueguen un papel importante a la hora de hacer pruebas. A la hora de mitigar los efectos de los sesgos, lo más importe en ser consciente de ellos. En esta charla veremos algunos ejemplos y cómo pueden afectar a las pruebas. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:8","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Visual Testing: Los usuarios tienen ojos, haz que tus pruebas puedan ver Evento: VLCTesting Año: 2020 Descripción: La automatización de pruebas end to end se centran en la parte funcional, es decir, ¿el sistema hace lo que tendría que hacer?. Pero, no responden a la cuestión de, ¿se ve cómo se debería ver?,¿cumple el diseño especificado?. En este caso, veremos cómo aplicar la técnica de visual testing para añadir esta capacidad a nuestra suite de pruebas. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:9","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Primeros pasos en Contract testing con Pact Evento: SNGULAR - StageOne Madrid Año: 2019 Descripción: El contract testing es una técnica que ayuda a validar la correcta comunicación entre componentes de manera automática. En esta charla veremos cómo iniciarse en esta técnica con el framework, open source, PACT. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:10","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Kit Selenium + Cucumber + Docker Evento: SNGULAR - Oviedo Año: 2018 Descripción: En esta charla, se repasan los conceptos básicos de automatización de pruebas para iniciarse en las pruebas web con Selenium en Java. Además, también se muestra cómo añadir Cucumber al proyecto de testing. Se finaliza mostrando cómo puede integrarse toda la suite en un entorno de CI dockerizado. Enlace: Ver Charla ","date":"2023-11-10","objectID":"/talks/listadocharlas/:3:11","tags":["Unit testing"],"title":"Mis charlas","uri":"/talks/listadocharlas/"},{"categories":[],"content":"Vamos a ver cómo utilizar la librería easyRandom para mejorar la mantenibilidad de las pruebas unitarias en Java","date":"2023-10-17","objectID":"/easyrandom/","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"¿Qué vamos a ver? En este artículo explicaremos cómo mejorar la mantenibilidad y eficacia de las pruebas unitarias a la hora detectar errores en el código. Veremos cómo, haciendo uso de determinadas librerías, podremos hacer que la generación de objetos de pruebas sea mucho más sencilla y resistente ante cambios en los constructores. ","date":"2023-10-17","objectID":"/easyrandom/:1:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Contexto A la hora de hacer pruebas unitarias, seguramente te hayas visto en la situación de tener que estar creando objetos una y otra vez. Para ello, habrás tenido que llamar al constructor de la clase con los parámetros correspondientes. Hasta aquí nada raro, pero muy probablemente habrá habido ocasiones en las que los valores de algunos de esos campos fuesen irrelevantes para prueba o veces en las que hayas tenido que crear objetos “dummy” anidados, simplemente porque eran obligatorios en el constructor. Todo ello, seguramente te haya generado algo de frustración en algún punto y te haya hecho cuestionarte si lo estabas haciendo bien o sí, si realmente esa la forma de hacer pruebas unitarias, entonces no merecería la pena el esfuerzo Es decir, normalmente, una prueba debe tener un objetivo claro, por tanto, es normal que dentro del SUT (System under test) haya campos que realmente sean el objeto de la prueba y, en cambio, otros sean irrelevantes. Pongamos un ejemplo. Supongamos que tenemos la clase “Persona” con los campos: Nombre, Email y Edad. Por otro lado, queremos hacer las pruebas unitarias de un servicio que, recibiendo un objeto Persona, nos dice si ésta puede viajar gratis en autobús o no. Sabemos que dicho cálculo únicamente depende de la edad, los menores de 14 años viajan gratis, por tanto, en este caso, los campos de Nombre y Email son irrelevantes. En este ejemplo, crear objetos Persona no nos supondría demasiado esfuerzo, pero supongamos que los campos de la clase Persona crecen o bien, empiezan a aparecer objetos anidados: Dirección, Parientes (Lista de Personas), Lista de teléfonos, etc. Ahora, se plantean varios aspectos a tener en cuenta: Resulta más laborioso crear los objetos ¿Qué ocurre cuando el constructor o los campos de la clase cambian? Cuándo hay listas de objetos, ¿Cuántos objetos debo crear? ¿Qué valores tengo que asignar a los campos que no influyen en la prueba? ¿Es bueno que los valores sean siempre los mismos, sin ninguna variabilidad? Para resolver este tipo de situaciones, habitualmente se utilizan dos patrones de diseño conocidos: Object Mother y Builder. En ambos casos se trata de tener “helpers” que nos faciliten la creación de objetos con las características que necesitamos. Ambas aproximaciones están muy extendidas, son adecuadas y favorecen la mantenibilidad de las pruebas. No obstante, siguen sin resolver algunas cuestiones: Al cambiar los constructores, aún siendo campos que no afecten en las pruebas, el código dejará de compilar Cuando aparezcan nuevos campos, debemos actualizar el código que genera los objetos para las pruebas Generar objetos anidados sigue siendo laborioso Los campos obligatorios y no utilizados, están hardcodeados y se asignan por defecto, por lo que no hay variabilidad en las pruebas. Una de las librerías, en java, que puede solucionar estos problemas es “easyRandom”. A continuación veremos detalles de su funcionamiento. ","date":"2023-10-17","objectID":"/easyrandom/:2:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"¿Qué es easyRandom? EasyRandom es una librería de Java que facilita la generación de datos aleatorios para pruebas unitarias y de integración. La idea detrás de EasyRandom es proporcionar una manera sencilla de crear objetos con valores aleatorios que puedan ser utilizados en pruebas. En lugar de tener que definir manualmente valores para cada atributo de una clase en cada prueba, EasyRandom automatiza este proceso, generando automáticamente datos aleatorios para cada atributo. Esta librería se encarga de manejar tipos de datos primitivos, clases personalizadas, colecciones, y otros tipos de objetos. También puede ser configurada para respetar ciertas reglas y restricciones en la generación de datos, lo que la hace bastante flexible. Aquí hay un ejemplo básico de cómo se puede usar EasyRandom para generar un objeto aleatorio: public class EasyRandomExample { public static void main(String[] args) { EasyRandom easyRandom = new EasyRandom(); Person randomPerson = easyRandom.nextObject(Person.class); System.out.println(randomPerson); } } En este ejemplo, Person es una clase ficticia y easyRandom.nextObject(Person.class) genera una instancia de Person con valores aleatorios para sus atributos. Como puede verse, la generación de estos objetos no depende del constructor de la clase, por lo que, el código de la prueba seguirá compilando, aunque se produzcan cambios en el SUT. Esto solventaría uno de los mayores problemas a la hora de mantener una suite de pruebas automáticas. ","date":"2023-10-17","objectID":"/easyrandom/:3:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"¿Por qué es interesante? Utilizar la biblioteca EasyRandom para el testing de tus aplicaciones tiene varias ventajas: Generación de datos aleatorios simplificada: Se automatiza la generación de datos aleatorios para tus objetos, evitando que tengas que escribir código repetitivo para cada prueba. Facilita las pruebas unitarias y de integración: Al generar automáticamente objetos de prueba, puedes enfocarte en probar el comportamiento del código en lugar de preocuparte por la creación manual de datos de prueba. Personalización de datos: Aunque genera datos aleatorios por defecto, EasyRandom también permite personalizar ciertos campos o atributos si es necesario, permitiéndote ajustar la generación según tus necesidades. Reducción de errores humanos: La generación manual de datos de prueba puede llevar a errores, especialmente cuando se tratan con muchos campos y combinaciones. EasyRandom ayuda a minimizar los errores humanos al generar datos aleatorios consistentes. Mantenimiento simplificado: Si cambian los requisitos de tus clases (nuevos campos, tipos, etc.), no necesitas actualizar manualmente tus datos de prueba, ya que EasyRandom se encargará de generarlos automáticamente. Mejora de la legibilidad: El uso de EasyRandom hace que tus pruebas sean más limpias y legibles, puesto que no es necesario definir valores de prueba explícitamente en cada caso. Rapidez en el desarrollo de pruebas: Al reducir el tiempo dedicado a la creación de objetos de prueba, puedes desarrollar pruebas de manera más rápida y efectiva. Facilidad de uso: Añadir esta librería a nuestros proyectos java es prácticamente inmediato y resulta tremendamente fácil de utilizar. ","date":"2023-10-17","objectID":"/easyrandom/:4:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"¿Dónde lo puedes aplicar? Como es lógico, esta librería nos va a permitir simplificar la creación de objetos para nuestras pruebas unitarias, pero también nos puede ser de gran ayuda cuando necesitemos generar un conjunto de datos de pruebas. Esto podemos conseguirlo utilizando los DTOs de nuestra aplicación y generando objetos aleatorios para, posteriormente, volcarlos a una base de datos o fichero. Dónde no es recomendable Esta librería puede no merecer la pena en proyectos donde la generación de objetos no resulte compleja o donde necesitemos un control preciso sobre todos los campos de los objetos que intervienen en la prueba. ","date":"2023-10-17","objectID":"/easyrandom/:5:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"¿Cómo utilizar easyRandom? Veamos easyRandom en acción con un ejemplo real. Entorno utilizado, prerrequisitos ","date":"2023-10-17","objectID":"/easyrandom/:6:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Prerrequisitos Java 8+ Maven o Gradle Eclipse o IntelliJ IDE ","date":"2023-10-17","objectID":"/easyrandom/:6:1","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Setup inicial Dentro de nuestro proyecto debemos añadir una nueva dependencia El fichero pom.xml quedaría de la siguiente manera: \u003cdependency\u003e \u003cgroupId\u003eorg.jeasy\u003c/groupId\u003e \u003cartifactId\u003eeasy-random-core\u003c/artifactId\u003e \u003cversion\u003e5.0.0\u003c/version\u003e \u003c/dependency\u003e ","date":"2023-10-17","objectID":"/easyrandom/:6:2","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Caso de uso básico El caso de uso más básico ya lo hemos visto antes. En ese ejemplo, se asignan valores a los campos de la clase persona de manera totalmente aleatoria. Obviamente, a la hora de hacer pruebas, necesitaremos tener control sobre algunos campos determinados. Vamos a ver esto en un ejemplo. Recordemos que easyRandom también puede utilizarse con tipos primitivos. Por tanto, nuestro ejemplo podría quedar así public class PersonServiceTest { private final EasyRandom easyRandom = new EasyRandom(); private final PersonService personService = new PersonService(); @Test public void testIsAdult() { // Genera una persona mayor de edad (edad \u003e= 18) Person adultPerson = easyRandom.nextObject(Person.class); // Nos aseguramos de que sea mayor de edad adultPerson.setAge(18 + easyRandom.nextInt(80)); assertTrue(personService.isAdult(adultPerson)); } @Test public void testIsNotAdult() { // Genera una persona menor de edad (edad \u003c 18) Person minorPerson = easyRandom.nextObject(Person.class); // Nos aseguramos que sea menor de edad minorPerson.setAge(easyRandom.nextInt(17)); assertFalse(personService.isAdult(minorPerson)); } } Como vemos, esta manera de generar los objetos de prueba nos protege ante cambios en la clase “Persona” y nos permite centrarnos únicamente en aquel campo que nos interesa. También podemos utilizar esta librería para generar listas de objetos aleatorios @Test void generateObjectsList() { EasyRandom generator = new EasyRandom(); //Generamos una lista de 5 Personas List\u003cPerson\u003e persons = generator.objects(Person.class, 5) .collect(Collectors.toList()); assertEquals(5, persons.size()); } Este test, en sí, no tiene demasiada utilidad, simplemente es para demostrar la capacidad de a la hora de generar listas, las cuales, podrían ser utilizadas para volcar datos a una base de datos, por ejemplo. Generación de datos parametrizados Veamos ahora cómo utilizar esta librería para tener un control más preciso en la misma generación del objeto. Esto podemos hacerlo mediante la parametrización. Fijar el valor un campo Imaginemos el caso de que para nuestras pruebas queramos mantener ciertos valores constantes (un ID, un nombre, una dirección, etc.) Para conseguirlo, tendríamos que configurar la inicialización de objetos mediante “EasyRandomParameters” y localizar los parámetros por su nombre. Veamos cómo: EasyRandomParameters params = new EasyRandomParameters(); // Asignar un valor al campo por medio de una función lamba params.randomize(named(\"age\"),()-\u003e 5); EasyRandom easyRandom = new EasyRandom(params); // El objeto tendrá siempre una edad de 5 Person person = easyRandom.nextObject(Person.class); Por supuesto, lo mismo podría hacer con colecciones u objetos complejos. Supongamos que nuestra clase Persona, contiene una clase Dirección en su interior y que, además, deseamos generar una lista de dos personas Veamos un ejemplo más completo: EasyRandomParameters parameters = new EasyRandomParameters() .randomize(Address.class, () -\u003e new Address(\"Random St.\", \"Random City\")) EasyRandom easyRandom = new EasyRandom(parameters); return Arrays.asList( easyRandom.nextObject(Person.class), easyRandom.nextObject(Person.class) ); Supongamos ahora que una persona pueda tener varias direcciones. Esto querría decir que el campo “Adress” será una lista dentro de la clase “Person”. Con esta librería también podemos hacer que nuestras colecciones tengan un tamaño variable. Es algo que también podemos hacer mediante los parámetros. EasyRandomParameters parameters = new EasyRandomParameters() .randomize(Address.class, () -\u003e new Address(\"Random St.\", \"Random City\")) .collectionSizeRange(2, 10); EasyRandom easyRandom = new EasyRandom(parameters); // El objeto tendrá una lista de entre 2 y 10 direcciones Person person = easyRandom.nextObject(Person.class); ","date":"2023-10-17","objectID":"/easyrandom/:6:3","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Establecer campos pseudoaleatorios Como hemos visto, fijar valores resulta bastante sencillo y directo. Pero, ¿qué ocurre si queremos controlar la aleatoriedad de los datos?. Es decir, deseamos generar nombres de personas aleatorios, pero que sigan siendo nombres y no únicamente cadenas de caracteres inconexos. Esta misma necesidad, quizá quede más clara cuando nos interese tener aleatoriedad en campos como: email, número de teléfono, DNI, número de tarjeta, nombre de ciudad, etc. Para ello, resulta útil a otras librerías de generación de datos. Una de las más conocidas es “Faker”. Combinando ambas librerías podríamos llegar a un código como este: EasyRandomParameters params = new EasyRandomParameters(); //Generar número entre 0 y 17 params.randomize(named(\"age\"), () -\u003e Faker.instance().number().numberBetween(0, 17)); // Generar nombre \"reales\" aleatorios params.randomize(named(\"name\"), () -\u003e Faker.instance().name().fullName()); EasyRandom easyRandom = new EasyRandom(params); Person person = easyRandom.nextObject(Person.class); Existen multitud de parámetros que nos permiten controlar la generación de objetos En el este enlace puede consultarse más información ","date":"2023-10-17","objectID":"/easyrandom/:6:4","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Qué me ha parecido EasyRandom es una librería que debería formar parte de tu mochila si desarrollas pruebas unitarias, ya que ayuda en la mantenibilidad de las pruebas unitarias. Además, y aunque pueda resultar extraño, establecer cierta aleatoriedad controlada en las pruebas, puede no ser malo. En cierto modo, es una manera de generar nuevos casos de pruebas de manera automática y aumentará la probabilidad de encontrar errores en código. ","date":"2023-10-17","objectID":"/easyrandom/:6:5","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"},{"categories":[],"content":"Enlaces GitHub - j-easy/easy-random: The simple, stupid random Java beans/records generator Quick Guide to EasyRandom in Java | Baeldung GitHub - DiUS/java-faker: Brings the popular ruby faker gem to Java ","date":"2023-10-17","objectID":"/easyrandom/:7:0","tags":["Unit testing"],"title":"Cómo mejorar la mantenibilidad de las pruebas unitarias","uri":"/easyrandom/"}]